<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--Spring配置文件-->

    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.charlie.web"/>

    <!--配置视图解析器[默认视图解析器]，因为容器中只会有一个视图解析器，所以可以不用配置id，根据类型注入-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--配置属性suffix和prefix-->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
        <!--调整默认视图解析器的优先级-->
        <property name="order" value="10"/>
    </bean>

    <!--
    1. 配置自定义视图解析器 BeanNameViewResolver
    2. 可以去解析我们自定义的视图
    3. 配置属性 order 表示视图解析器执行的顺序，值越小优先级又高
    4. 属性order的默认优先级是最低的，值为 Integer.MAX_VALUE
    -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="99"/>
    </bean>

    <!--配置国际化错误信息资源处理bean-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!--配置国家化文件名字，如果这样配置的话，表示messageSource回到 src/i18nXXX.properties去读取错误信息-->
        <property name="basename" value="i18n"></property>
    </bean>

    <!--配置文件上传需要的bean，id需要设置为multipartResolver-->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>

    <!--配置自定义拦截器-spring配置文件-->
    <mvc:interceptors>
        <!--第一种配置方式
        1. 直接使用ref引用到对应的MyInterceptor01
        2. 这种方式会拦截所有的目标方法
        -->
        <!--<ref bean="myInterceptor01"/>-->

        <!--第二种配置方式
        1. mvc:mapping path="/hi" 指定要拦截的路径
        2. <ref bean="myInterceptor01"/> 指定对哪个拦截器进行配置
        -->
        <!--<mvc:interceptor>-->
        <!--    <mvc:mapping path="/hi"/>           -->
        <!--    <ref bean="myInterceptor01"/>-->
        <!--</mvc:interceptor>-->

        <mvc:interceptor>
            <!--第三种配置方式
            1. mapping path="/h*" 通配符方式，表示拦截 /h 开头的路径
            2. exclude-mapping path="/hi" 表示 /i 不会被拦截
            -->
            <mvc:mapping path="/h*"/>
            <mvc:exclude-mapping path="/hello"/>
            <ref bean="myInterceptor01"/>
        </mvc:interceptor>

        <!--配置多个拦截器
        1. 配置第二个拦截器
        2. 多个拦截器在执行时，是按照顺序执行的
        -->
        <mvc:interceptor>
            <mvc:mapping path="/h*"/>
            <ref bean="myInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--加入两个常规配置-->
    <!--支持SpringMVC的高级功能，比如JSR303校验，映射动态请求-->
    <mvc:annotation-driven/>
    <!--将SpringMVC不能处理的请求，交给tomcat处理，比如css,js等-->
    <mvc:default-servlet-handler/>
</beans>